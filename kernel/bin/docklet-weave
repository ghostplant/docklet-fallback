#!/bin/bash

set -e

. /etc/docklet/docklet.conf

TYPE=$1 ; shift
UUID=$1 ; shift

USER_NAME=$(echo ${UUID} | awk -F\- '{print $1}')
NAT_ID=$(echo ${UUID} | awk -F\- '{print $2}')
NODE_ID=$(echo ${UUID} | awk -F\- '{print $3}')

TARGET="/var/lib/lxc/${UUID}/rootfs"
LAYER="${NFS_PREFIX}/local/volumes/${UUID}"

if [[ "${TYPE}" == "start" ]]; then

	NAT_ID=${NAT_ID} USER_NAME=${USER_NAME} stone >/dev/null 2>&1 || true

	NATADDR=10.10.${NAT_ID}.${NODE_ID}/16
	
	mkdir -p /var/lib/lxc/${UUID} ${NFS_PREFIX}/global/users/${USER_NAME}/home/.docklet/nodes/${NODE_ID}

	if [[ "${NODE_ID}" == "0" ]]; then
		HOSTNAME='nat-master'
	else
		HOSTNAME='nat-slave'${NODE_ID}
	fi
	
	cat <<EOF > /var/lib/lxc/${UUID}/config
lxc.pts = 1024
lxc.console = none
lxc.tty = 0
lxc.pivotdir = lxc_putold
lxc.rootfs = ${TARGET}
lxc.utsname = ${HOSTNAME}
lxc.autodev = 0

lxc.network.type = veth
lxc.network.name = eth0
lxc.network.link = ovs-bridge
lxc.network.ipv4 = ${NATADDR}
lxc.network.ipv4.gateway = 10.10.0.1
lxc.network.flags = up
lxc.network.mtu = 1420

lxc.cgroup.devices.deny = a
lxc.cgroup.devices.allow = c *:* m
lxc.cgroup.devices.allow = b *:* m
lxc.cgroup.devices.deny = c 5:1 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
lxc.cgroup.devices.allow = c 10:200 rwm
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
lxc.cgroup.devices.allow = c 1:7 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm

lxc.cap.keep = 0
lxc.cap.keep = 1
lxc.cap.keep = 4
lxc.cap.keep = 3
lxc.cap.keep = 27
lxc.cap.keep = 13
lxc.cap.keep = 6
lxc.cap.keep = 7
lxc.cap.keep = 31
lxc.cap.keep = 8
lxc.cap.keep = 10
lxc.cap.keep = 18
lxc.cap.keep = 5
lxc.cap.keep = 29

lxc.cgroup.memory.kmem.limit_in_bytes = 512m
lxc.cgroup.memory.limit_in_bytes = 4294967296
lxc.cgroup.memory.soft_limit_in_bytes = 4294967296
lxc.cgroup.memory.memsw.limit_in_bytes = 8589934592
lxc.cgroup.cpu.cfs_quota_us = ${CPU_SHARE_QUOTA_US}

lxc.mount.auto = proc sys

lxc.mount.entry = devpts ${TARGET}/dev/pts devpts newinstance,ptmxmode=0666,nosuid,noexec 0 0

lxc.mount.entry = /usr/local/sbin/container-init ${TARGET}/init none bind,ro 0 0
lxc.mount.entry = /usr/local/sbin/container-docklet ${TARGET}/usr/bin/docklet none bind,ro 0 0

lxc.mount.entry = ${NFS_PREFIX}/global/users/${USER_NAME}/home ${TARGET}/nfs none rbind,rw 0 0
lxc.mount.entry = ${NFS_PREFIX}/global/users/${USER_NAME}/home/.docklet/nodes/${NODE_ID} ${TARGET}/nfs/.docklet/nodes/current none rbind,rw 0 0
lxc.mount.entry = ${NFS_PREFIX}/global/users/${USER_NAME}/hosts-${NAT_ID} ${TARGET}/etc/hosts none bind,ro 0 0

EOF
	lxc-stop -k -n ${UUID} || true
	umount -l ${TARGET} || true
	umount -l ${LAYER} || true
	rm -rf ${TARGET} ${LAYER}
	mkdir -p ${TARGET} ${LAYER}
	
	lvcreate -L ${DISK_LIMIT_MB} -n ${UUID} dl-devmapper && yes | mkfs.ext4 /dev/dl-devmapper/${UUID} || true
	mount /dev/dl-devmapper/${UUID} ${LAYER}
	
	mkdir -p ${LAYER}/{work,overlayfs}
	mount -t overlay overlay -olowerdir=${NFS_PREFIX}/local/filesystem,upperdir=${LAYER}/overlayfs,workdir=${LAYER}/work ${TARGET}/ || mount -t aufs -o br=${LAYER}/overlayfs=rw:${NFS_PREFIX}/local/filesystem=ro+wh none ${TARGET}/
	
	mkdir -p ${LAYER}/overlayfs/etc
	for DNS in ${DNS_SERVERS}; do echo "nameserver $DNS" > ${LAYER}/overlayfs/etc/resolv.conf; done
	
	mkdir -p ${TARGET}/root/.ssh
	cp ${NFS_PREFIX}/global/users/${USER_NAME}/ssh_keys/id_rsa ${TARGET}/root/.ssh/id_rsa
	cp ${NFS_PREFIX}/global/users/${USER_NAME}/ssh_keys/authorized_keys ${TARGET}/root/.ssh/authorized_keys
	chmod go-rw ${TARGET}/root/.ssh/id_rsa
	
	lxc-start -d -n ${UUID} -f /var/lib/lxc/${UUID}/config -- /init

#	ip addr add ${IPADDR} dev ${IPDEV} >/dev/null 2>&1 || true
	
#	IP_NOMASK=$(echo ${IPADDR} | awk -F"/" '{print $1}' )
#	iptables -t nat -A PREROUTING -d ${IP_NOMASK} -j DNAT --to ${NATADDR} || true
#	iptables -t nat -A OUTPUT -d ${IP_NOMASK} -j DNAT --to ${NATADDR} || true
#	iptables -t nat -A POSTROUTING -s ${NATADDR} -j SNAT --to ${IP_NOMASK} || true

#	cat <<EOF > ${NFS_PREFIX}/global/users/${USER_NAME}/iptables
##!/bin/bash
#ip addr del ${IPADDR} dev ${IPDEV} || true
#iptables -t nat -D PREROUTING -d ${IP_NOMASK} -j DNAT --to ${NATADDR} || true
#iptables -t nat -D OUTPUT -d ${IP_NOMASK} -j DNAT --to ${NATADDR} || true
#iptables -t nat -D POSTROUTING -s ${NATADDR} -j SNAT --to ${IP_NOMASK} || true
#EOF
#	chmod a+x ${NFS_PREFIX}/global/users/${USER_NAME}/iptables
	
	# NSPID=$(cat "/sys/fs/cgroup/cpu/lxc/${UUID}/tasks" 2>/dev/null | head -n 1)
	# [[ "${NSPID}" == "" ]] && false
	
	# mkdir -p /var/run/netns
	# rm -f /var/run/netns/$NSPID
	# ln -s /proc/$NSPID/ns/net /var/run/netns/$NSPID
	# LOCAL_IFNAME=vethl$NSPID
	# GUEST_IFNAME=vethg$NSPID
	# ip link add name $LOCAL_IFNAME type veth peer name $GUEST_IFNAME
	# ip link set $LOCAL_IFNAME up
	# ip link set $GUEST_IFNAME netns $NSPID
	# ip netns exec $NSPID ip link set $GUEST_IFNAME name eth0
	# ip netns exec $NSPID ip addr add ${NATADDR}/8 dev eth0
	# ip netns exec $NSPID ip link set eth0 up
	# brctl addif ovs-bridge $LOCAL_IFNAME
	# rm -f /var/run/netns/$NSPID
	
elif [[ "${TYPE}" == "stop" ]]; then
	lxc-stop -k -n ${UUID} || true
	umount -l ${TARGET} || true
	rm -rf ${TARGET} || true
	umount -l ${LAYER} || true
	rm -rf ${LAYER} || true
	yes | lvremove /dev/dl-devmapper/${UUID}
	rm -rf /var/lib/lxc/${UUID}
#	tar czvf ${NFS_PREFIX}/global/images/self_${USER_NAME}_${IMAGE_NAME}.tgz ./
elif [[ "${TYPE}" == "find" ]]; then
	lxc-info -n ${UUID} 2>/dev/null | grep RUNNING >/dev/null
else
	false
fi

