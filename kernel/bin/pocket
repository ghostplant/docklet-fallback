#!/usr/bin/python3

import os, sys, subprocess, time, re

def sys_call(command):
	output = subprocess.getoutput(command).strip()
	return None if output == '' else output

def etcd_lock():
	return
	#while sys_call('curl -L http://0.0.0.0:4001/v2/keys/docklet/lock?prevExist=false -XPUT -d value=busy 2>/dev/null | grep errorCode') != None:
	#	time.sleep(0.5)

def etcd_unlock():
	return
	#while sys_call('curl -L http://0.0.0.0:4001/v2/keys/docklet/lock?prevValue=busy -XDELETE 2>/dev/null | grep errorCode') != None:
	#	time.sleep(0.5)


def etcd_get_instance_by_id(NAT_ID):
	return sys_call("cat /home/docklet/global/database/instances/%s 2>/dev/null" % NAT_ID)
	#return sys_call("curl -L http://0.0.0.0:4001/v2/keys/docklet/instances/%s 2>/dev/null | python -mjson.tool | grep value.: | awk -F\\\" '{print $4}'" % NAT_ID)

def etcd_set_instance_by_id(NAT_ID, NEW_STATE):
	return sys_call("echo '%s' > /home/docklet/global/database/instances/%s 2>/dev/null" % (NEW_STATE, NAT_ID))
	#return sys_call("curl -L http://0.0.0.0:4001/v2/keys/docklet/instances/%s -XPUT -d value='%s'" % (NAT_ID, NEW_STATE))
	
def etcd_del_instance_by_id(NAT_ID):
	return sys_call("rm -f /home/docklet/global/database/instances/%s 2>/dev/null" % NAT_ID)
	#return sys_call("curl -L http://0.0.0.0:4001/v2/keys/docklet/instances/%s -XDELETE" % NAT_ID)

def etcd_all_instances():
	return sys_call("ls /home/docklet/global/database/instances/ 2>/dev/null")
	#return sys_call("curl -L http://0.0.0.0:4001/v2/keys/docklet/instances 2>/dev/null | python -mjson.tool | grep key.:../docklet/instances/ | awk -F\\\" '{print $4}'")


def get_environ(names, quit=True):
	values = []
	for name in names:
		values.append(os.environ[name].strip())
	return values

def main(command):
	if command == 'create':
		[THIS_HOST, USER_NAME, NFS_PREFIX] = get_environ(["THIS_HOST", "USER_NAME", "NFS_PREFIX"])
		
		NAT_ID = 1
		while etcd_get_instance_by_id(NAT_ID) != None:
			NAT_ID += 1
		
		MASTER_IP = '10.10.%d.0' % NAT_ID
		HOST_NAME = 'nat-master'
		
		sys_call('mkdir -p %s/global/users/%s/home' % (NFS_PREFIX, USER_NAME))
		COMMON_HOST = '%s/global/users/%s/hosts-%d' % (NFS_PREFIX, USER_NAME, NAT_ID)
		
		host = open(COMMON_HOST, "w")
		host.write('127.0.0.1 localhost\n')
		host.write('127.0.0.1 host-%d_%s\n' % (NAT_ID, USER_NAME))
		host.write('10.10.0.1 docklet-cloud\n')
		host.write('%s %s\n' % (MASTER_IP, HOST_NAME))
		host.close()
		
		CONTAINER_UUID = '%s-%d-0' % (USER_NAME, NAT_ID)
		
		sys_call('docklet-weave start %s >/dev/null 2>&1' % CONTAINER_UUID)
		
		init_pass = sys_call('cat %s/global/users/%s/ssh_keys/init.pass 2>/dev/null' % (NFS_PREFIX, USER_NAME))
		sys_call('echo "root:%s" | lxc-attach -n %s chpasswd' % (init_pass, CONTAINER_UUID))
		
		etcd_set_instance_by_id(NAT_ID, "%s|%s|%s:%s:%s:%s" % (USER_NAME, 'root_base', THIS_HOST, CONTAINER_UUID, MASTER_IP, HOST_NAME))
		print(NAT_ID)
		
	elif command == 'scaleout' or command == 'scalein':
		[THIS_HOST, USER_NAME, NFS_PREFIX, NAT_ID, SLAVE_LIMIT] = get_environ(["THIS_HOST", "USER_NAME", "NFS_PREFIX", "NAT_ID", "SLAVE_LIMIT"])
		STATE = etcd_get_instance_by_id(NAT_ID)
		if STATE == None:
			raise Exception("not such instance")
		
		OWNER = STATE.split('|')[0]
		if OWNER != USER_NAME:
			raise Exception("wrong instance owner")
		
		CLUSTERS = STATE.split('|')[-1].strip().split()
		
		SLAVES=CLUSTERS[:-1]
		MASTER=CLUSTERS[-1]
		
		WORK_ON=MASTER.split(':')[0]
		IMAGE=STATE.split('|')[1]
		
		COMMON_HOST="%s/global/users/%s/hosts-%s" % (NFS_PREFIX, USER_NAME, NAT_ID)
		
		if command == 'scaleout':
			OFFSET = len(SLAVES)+1
			if OFFSET>int(SLAVE_LIMIT):
				raise Exception("slaves limit exceed")
			
			NATIVE_IP=MASTER.split(':')[2].split('.')
			NATIVE_IP[3]=str(OFFSET)
			NATIVE_IP='.'.join(NATIVE_IP)
			HOST_NAME='nat-slave%d' % OFFSET
			
			host = open(COMMON_HOST, "a")
			host.write('%s %s\n' % (NATIVE_IP, HOST_NAME))
			host.close()
			
			CONTAINER_ID="%s-%s-%s" % (USER_NAME,NAT_ID,OFFSET)
			sys_call("docklet-weave start %s" % CONTAINER_ID)
			SLAVES.append('%s:%s:%s:%s' % (THIS_HOST, CONTAINER_ID, NATIVE_IP, HOST_NAME))
			
		else:
			if len(SLAVES)==0:
				raise Exception("no more slaves to release")
			hostfile = sys_call("cat %s | head -n -1" % COMMON_HOST).split('\n')
			
			host = open(COMMON_HOST, "w")
			for line in hostfile:
				host.write('%s\n' % line)
			host.close()
			
			CONTAINER_ID = SLAVES[-1].split(':')[1]
			NATIVE_IP = SLAVES[-1].split(':')[2]
			HOST_NAME = SLAVES[-1].split(':')[3]
			
			sys_call("docklet-weave stop %s" % CONTAINER_ID)
			SLAVES.pop()
		
		SLAVES.append(MASTER)
		etcd_set_instance_by_id(NAT_ID, "%s|%s|%s" % (USER_NAME, 'root_base', " ".join(SLAVES)))
		print("%s %s %s %s" % (NATIVE_IP, THIS_HOST, CONTAINER_ID, HOST_NAME))
		
	elif command == 'list':
		[USER_NAME] = get_environ(["USER_NAME"])
		
		INST = etcd_all_instances()
		if INST != None:
			for ITEM in INST.split():
				NAT_ID = ITEM.split('/')[-1]
				DATAS = etcd_get_instance_by_id(NAT_ID)
				OWNER = DATAS.split('|')[0]
				if USER_NAME == OWNER or USER_NAME == 'root':
					print('%s|%s' % (NAT_ID, DATAS))
		
	elif command == 'images':
		[USER_NAME, HOME_PREF] = get_environ(["USER_NAME", "NFS_PREFIX"])
		
		for image in sys_call('ls %s/global/images/ 2>/dev/null' % HOME_PREF).strip().split():
			[mod, owner, img] = image.split('_')
			if mod == 'pub' or USER_NAME == 'root' or USER_NAME == owner: 
				print(image[:-4])
	
	elif command == 'rmi':
		[USER_NAME, HOME_PREF, IMAGE] = get_environ(["USER_NAME", "NFS_PREFIX", "IMAGE"])
		if not re.match('^[0-9,a-z,\-]{1,20}$', IMAGE):
			raise Exception("image name not allowed")
		sys_call('rm -rf %s/global/images/*_%s_%s.tgz' % (HOME_PREF, USER_NAME, IMAGE))
	
	elif command == 'chi':
		[USER_NAME, HOME_PREF, IMAGE] = get_environ(["USER_NAME", "NFS_PREFIX", "IMAGE"])
		if not re.match('^[0-9,a-z,\-]{1,20}$', IMAGE):
			raise Exception("image name not allowed")
		origin = sys_call('echo %s/global/images/*_%s_%s.tgz 2>/dev/null' % (HOME_PREF, USER_NAME, IMAGE))
		if origin == None or origin.find('*')!=-1:
			raise Exception("image not exists")
		mod = origin.split('/')[-1].split('_')[0]
		new_mod = 'pub' if mod == 'self' else 'self'
		sys_call('mv %s/global/images/%s_%s_%s.tgz %s/global/images/%s_%s_%s.tgz 2>/dev/null' % (HOME_PREF, mod, USER_NAME, IMAGE, HOME_PREF, new_mod, USER_NAME, IMAGE))
		
	elif command == 'remove':
		[USER_NAME, NAT_ID, HOME_PREF] = get_environ(["USER_NAME", "NAT_ID", "NFS_PREFIX"])
		
		"""[IMAGE_NAME] = get_environ(["IMAGE_NAME"])
		if IMAGE_NAME != None:
			if not re.match('^[0-9,a-z,\-]{1,20}$', IMAGE_NAME):
				raise Exception("image name not allowed")
			GENERATE = '%s_%s' % (USER_NAME, IMAGE_NAME)
			LOCALTION = '%s/global/images/%s_%s.tgz' % (HOME_PREF, '%s', GENERATE)
			if os.path.exists(LOCALTION % 'pub') or os.path.exists(LOCALTION % 'self'):
				raise Exception("image already exists")"""
		
		[OWNER, USE_IMAGE, DOCKER_LIST] = etcd_get_instance_by_id(NAT_ID).split('|')
		if OWNER != USER_NAME:
			raise Exception("wrong container owners")
		
		nodes = DOCKER_LIST.strip().split()
		if len(nodes)>1 or len(nodes[0].strip())==0:
			raise Exception("not single master node")
		for DOCKER_NODE in nodes:
			[DOCKER_IP, DOCKER_ID, NATIVE_IP, HOST_NAME] = DOCKER_NODE.split(':')
			sys_call('docklet-weave stop %s' % DOCKER_ID)
		
		etcd_del_instance_by_id(NAT_ID)
		os.remove('%s/global/users/%s/hosts-%s' % (HOME_PREF, USER_NAME, NAT_ID))
		
	else:
		print("Wrong Usage.")

if __name__ == '__main__' and subprocess.getoutput("whoami") == 'root':
	try:
		etcd_lock()
		main(sys.argv[1])
		code = 0
	except Exception as ex:
		print(str(ex))
		code = 1
	finally:
		etcd_unlock()
	sys.exit(code)

