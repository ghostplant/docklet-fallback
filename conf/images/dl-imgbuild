#!/bin/bash

set -e

. /etc/docklet/docklet.conf

[[ "`whoami`" != "root" ]] && echo "Root previledge required!" && exit 1

DIST=jessie
ARCH=amd64
MIRR=http://mirrors.ustc.edu.cn/ubuntu

LSB=$(echo ${MIRR} | awk -F\/ '{print $NF}')

TARGET=${NFS_PREFIX}/global/images

TEMP_ROOTFS=/tmp/docklet_root_base

rm -rf ${TEMP_ROOTFS}
mkdir -p ${TEMP_ROOTFS}/layer

cd ${TEMP_ROOTFS}/layer

#debootstrap --arch=${ARCH} --foreign ${DIST} . ${MIRR}
#chroot . /debootstrap/debootstrap --second-stage

LSB=ubuntu
IMAGE_URL='http://mirrors.ustc.edu.cn/ubuntu-cdimage/ubuntu-core/releases/14.04/release/ubuntu-core-14.04-core-amd64.tar.gz'
IMAGE_NAME=$(basename ${IMAGE_URL})
rm -f /tmp/${IMAGE_NAME}
wget ${IMAGE_URL} -P /tmp/
tar xvf /tmp/${IMAGE_NAME}
rm -f /tmp/${IMAGE_NAME}


echo 'docklet-node' > ./etc/hostname

echo 'set nocompatible' > ./etc/vim/vimrc.tiny
echo 'set backspace=indent,eol,start' >> ./etc/vim/vimrc.tiny
echo 'set autoindent' >> ./etc/vim/vimrc.tiny

echo 'APT::Install-Recommends "false";' > ./etc/apt/apt.conf

POOL='main'
if [[ "${LSB}" == "debian" ]]; then
	POOL="${POOL} contrib non-free"
elif [[ "${LSB}" == "ubuntu" ]]; then
	POOL="${POOL} restricted universe multiverse"
fi

echo "deb ${MIRR} ${DIST} ${POOL}" > ./etc/apt/sources.list
# echo "deb ${MIRR} ${DIST}-updates ${POOL}" >> ./etc/apt/sources.list

CLEAN="./usr/local/bin/apt-clean"

echo '#!/bin/bash' > ${CLEAN}
echo '[[ "`whoami`" != "root" ]] && echo "User must be root." && exit 1' >> ${CLEAN}
echo 'rm -rf /usr/share/doc/*' >> ${CLEAN}
echo 'rm -rf /usr/share/man/*' >> ${CLEAN}
echo 'rm -rf /var/cache/apt/*.bin' >> ${CLEAN}
echo 'rm -rf /var/cache/apt/archives/*.deb' >> ${CLEAN}
echo 'rm -rf /var/lib/apt/lists/*.*' >> ${CLEAN}
echo 'rm -rf /usr/share/help/*' >> ${CLEAN}
echo 'rm -rf /usr/share/help-langpack/*' >> ${CLEAN}
echo 'rm -rf /var/log/*.log /var/log/apt/*.log' >> ${CLEAN}
echo 'mkdir -p /usr/share/icons /usr/share/man/man1' >> ${CLEAN}
echo 'cd /usr/share/icons' >> ${CLEAN}
echo 'rm -rf `find . | grep '\.cache'`' >> ${CLEAN}
echo 'mkdir -p /usr/share/locale' >> ${CLEAN}
echo 'cd /usr/share/locale' >> ${CLEAN}
echo 'rm -rf `ls . | grep -v zh_CN`' >> ${CLEAN}

chmod a+x ${CLEAN}

cp /etc/resolv.conf etc/

DEBIAN_FRONTEND=noninteractive chroot . apt-get update
DEBIAN_FRONTEND=noninteractive chroot . apt-get install -y bash-completion openssh-server inetutils-ping 
# DEBIAN_FRONTEND=noninteractive chroot . apt-get purge -y man-db manpages nano libicu52 apt-utils bsdmainutils cron cpio dmidecode groff-base ifupdown iptables isc-dhcp-client isc-dhcp-common libdns-export100 libgdbm3 libgmp10 libgnutls-deb0-28 libgnutls-openssl27 libgpg-error0 libsigc++-2.0-0c2a libxtables10 whiptail || true
chroot . apt-clean

touch ./usr/bin/docklet ./sbin/initctl
chmod a+x ./usr/bin/docklet ./sbin/initctl

echo '. /etc/bash_completion' >> ./etc/bash.bashrc
echo 'alias ls="ls --color=auto"' >> ./etc/bash.bashrc
echo 'alias grep="grep --color=auto"' >> ./etc/bash.bashrc

echo 'StrictHostKeyChecking no' >> ./etc/ssh/ssh_config
echo 'UserKnownHostsFile /dev/null' >> ./etc/ssh/ssh_config
echo 'LogLevel QUIET' >> ./etc/ssh/ssh_config

sed -i 's/PermitRootLogin\ without\-password/PermitRootLogin\ yes/g' ./etc/ssh/sshd_config

IMAGE_ID='1f0000000000baa2b698e29c86fced779eb993f88f89df55882c5814ff0697be'
mkdir ../${IMAGE_ID}

tar cvf ../${IMAGE_ID}/layer.tar *
cd ../${IMAGE_ID} && rm -rf ../layer

echo '1.0' > VERSION
echo '{"id":"'${IMAGE_ID}'","parent":null}' > json

cd .. && echo '{"root_base":{"latest":"'${IMAGE_ID}'"}}' > repositories

tar czvf ${TARGET}/pub_root_base.tgz *
cd ${TARGET} && rm -rf ${TEMP_ROOTFS}

